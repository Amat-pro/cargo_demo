<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1174" onload="init(evt)" viewBox="0 0 1200 1174" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
            if (!isEdge) {
                svg.removeAttribute("viewBox");
            }
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1174" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="1157.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1190" y="24.00">Search</text><text id="matched" x="1190" y="1157.00"> </text><svg id="frames" x="10" width="1180" total_samples="5088"><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.06%)</title><rect x="0.0000%" y="1093" width="0.0590%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1103.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.06%)</title><rect x="0.0000%" y="1077" width="0.0590%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1087.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.06%)</title><rect x="0.0000%" y="1061" width="0.0590%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="3"/><text x="0.2500%" y="1071.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="0.0590%" y="821" width="0.0197%" height="15" fill="rgb(251,123,47)" fg:x="3" fg:w="1"/><text x="0.3090%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.0590%" y="805" width="0.0197%" height="15" fill="rgb(221,13,13)" fg:x="3" fg:w="1"/><text x="0.3090%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.0590%" y="789" width="0.0197%" height="15" fill="rgb(238,131,9)" fg:x="3" fg:w="1"/><text x="0.3090%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.0590%" y="773" width="0.0197%" height="15" fill="rgb(211,50,8)" fg:x="3" fg:w="1"/><text x="0.3090%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (1 samples, 0.02%)</title><rect x="0.0786%" y="821" width="0.0197%" height="15" fill="rgb(245,182,24)" fg:x="4" fg:w="1"/><text x="0.3286%" y="831.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (1 samples, 0.02%)</title><rect x="0.0786%" y="805" width="0.0197%" height="15" fill="rgb(242,14,37)" fg:x="4" fg:w="1"/><text x="0.3286%" y="815.50"></text></g><g><title>core::ptr::unique::Unique&lt;T&gt;::as_ptr (1 samples, 0.02%)</title><rect x="0.0786%" y="789" width="0.0197%" height="15" fill="rgb(246,228,12)" fg:x="4" fg:w="1"/><text x="0.3286%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.0786%" y="773" width="0.0197%" height="15" fill="rgb(213,55,15)" fg:x="4" fg:w="1"/><text x="0.3286%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.0786%" y="757" width="0.0197%" height="15" fill="rgb(209,9,3)" fg:x="4" fg:w="1"/><text x="0.3286%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.0786%" y="741" width="0.0197%" height="15" fill="rgb(230,59,30)" fg:x="4" fg:w="1"/><text x="0.3286%" y="751.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.02%)</title><rect x="0.0983%" y="821" width="0.0197%" height="15" fill="rgb(209,121,21)" fg:x="5" fg:w="1"/><text x="0.3483%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.0983%" y="805" width="0.0197%" height="15" fill="rgb(220,109,13)" fg:x="5" fg:w="1"/><text x="0.3483%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.0983%" y="789" width="0.0197%" height="15" fill="rgb(232,18,1)" fg:x="5" fg:w="1"/><text x="0.3483%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.0983%" y="773" width="0.0197%" height="15" fill="rgb(215,41,42)" fg:x="5" fg:w="1"/><text x="0.3483%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (4 samples, 0.08%)</title><rect x="0.0590%" y="837" width="0.0786%" height="15" fill="rgb(224,123,36)" fg:x="3" fg:w="4"/><text x="0.3090%" y="847.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.02%)</title><rect x="0.1179%" y="821" width="0.0197%" height="15" fill="rgb(240,125,3)" fg:x="6" fg:w="1"/><text x="0.3679%" y="831.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.02%)</title><rect x="0.1179%" y="805" width="0.0197%" height="15" fill="rgb(205,98,50)" fg:x="6" fg:w="1"/><text x="0.3679%" y="815.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (1 samples, 0.02%)</title><rect x="0.1179%" y="789" width="0.0197%" height="15" fill="rgb(205,185,37)" fg:x="6" fg:w="1"/><text x="0.3679%" y="799.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.1179%" y="773" width="0.0197%" height="15" fill="rgb(238,207,15)" fg:x="6" fg:w="1"/><text x="0.3679%" y="783.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.1179%" y="757" width="0.0197%" height="15" fill="rgb(213,199,42)" fg:x="6" fg:w="1"/><text x="0.3679%" y="767.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.1179%" y="741" width="0.0197%" height="15" fill="rgb(235,201,11)" fg:x="6" fg:w="1"/><text x="0.3679%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="0.1376%" y="837" width="0.0197%" height="15" fill="rgb(207,46,11)" fg:x="7" fg:w="1"/><text x="0.3876%" y="847.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="0.1376%" y="821" width="0.0197%" height="15" fill="rgb(241,35,35)" fg:x="7" fg:w="1"/><text x="0.3876%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.1376%" y="805" width="0.0197%" height="15" fill="rgb(243,32,47)" fg:x="7" fg:w="1"/><text x="0.3876%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.1376%" y="789" width="0.0197%" height="15" fill="rgb(247,202,23)" fg:x="7" fg:w="1"/><text x="0.3876%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.1376%" y="773" width="0.0197%" height="15" fill="rgb(219,102,11)" fg:x="7" fg:w="1"/><text x="0.3876%" y="783.50"></text></g><g><title>inferno::flamegraph::from_lines (1 samples, 0.02%)</title><rect x="0.1572%" y="821" width="0.0197%" height="15" fill="rgb(243,110,44)" fg:x="8" fg:w="1"/><text x="0.4072%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.1572%" y="805" width="0.0197%" height="15" fill="rgb(222,74,54)" fg:x="8" fg:w="1"/><text x="0.4072%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.1572%" y="789" width="0.0197%" height="15" fill="rgb(216,99,12)" fg:x="8" fg:w="1"/><text x="0.4072%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.1572%" y="773" width="0.0197%" height="15" fill="rgb(226,22,26)" fg:x="8" fg:w="1"/><text x="0.4072%" y="783.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (1 samples, 0.02%)</title><rect x="0.1769%" y="533" width="0.0197%" height="15" fill="rgb(217,163,10)" fg:x="9" fg:w="1"/><text x="0.4269%" y="543.50"></text></g><g><title>rustc_demangle::try_demangle (1 samples, 0.02%)</title><rect x="0.1769%" y="517" width="0.0197%" height="15" fill="rgb(213,25,53)" fg:x="9" fg:w="1"/><text x="0.4269%" y="527.50"></text></g><g><title>rustc_demangle::demangle (1 samples, 0.02%)</title><rect x="0.1769%" y="501" width="0.0197%" height="15" fill="rgb(252,105,26)" fg:x="9" fg:w="1"/><text x="0.4269%" y="511.50"></text></g><g><title>rustc_demangle::legacy::demangle (1 samples, 0.02%)</title><rect x="0.1769%" y="485" width="0.0197%" height="15" fill="rgb(220,39,43)" fg:x="9" fg:w="1"/><text x="0.4269%" y="495.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="0.1769%" y="469" width="0.0197%" height="15" fill="rgb(229,68,48)" fg:x="9" fg:w="1"/><text x="0.4269%" y="479.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.02%)</title><rect x="0.1769%" y="453" width="0.0197%" height="15" fill="rgb(252,8,32)" fg:x="9" fg:w="1"/><text x="0.4269%" y="463.50"></text></g><g><title>core::mem::replace (1 samples, 0.02%)</title><rect x="0.1769%" y="437" width="0.0197%" height="15" fill="rgb(223,20,43)" fg:x="9" fg:w="1"/><text x="0.4269%" y="447.50"></text></g><g><title>core::ptr::read (1 samples, 0.02%)</title><rect x="0.1769%" y="421" width="0.0197%" height="15" fill="rgb(229,81,49)" fg:x="9" fg:w="1"/><text x="0.4269%" y="431.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.1769%" y="405" width="0.0197%" height="15" fill="rgb(236,28,36)" fg:x="9" fg:w="1"/><text x="0.4269%" y="415.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.1769%" y="389" width="0.0197%" height="15" fill="rgb(249,185,26)" fg:x="9" fg:w="1"/><text x="0.4269%" y="399.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.1769%" y="373" width="0.0197%" height="15" fill="rgb(249,174,33)" fg:x="9" fg:w="1"/><text x="0.4269%" y="383.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.1965%" y="341" width="0.0197%" height="15" fill="rgb(233,201,37)" fg:x="10" fg:w="1"/><text x="0.4465%" y="351.50"></text></g><g><title>&lt;rustc_demangle::SizeLimitedFmtAdapter&lt;F&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.1965%" y="325" width="0.0197%" height="15" fill="rgb(221,78,26)" fg:x="10" fg:w="1"/><text x="0.4465%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.1965%" y="309" width="0.0197%" height="15" fill="rgb(250,127,30)" fg:x="10" fg:w="1"/><text x="0.4465%" y="319.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.1965%" y="293" width="0.0197%" height="15" fill="rgb(230,49,44)" fg:x="10" fg:w="1"/><text x="0.4465%" y="303.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.1965%" y="277" width="0.0197%" height="15" fill="rgb(229,67,23)" fg:x="10" fg:w="1"/><text x="0.4465%" y="287.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.02%)</title><rect x="0.1965%" y="261" width="0.0197%" height="15" fill="rgb(249,83,47)" fg:x="10" fg:w="1"/><text x="0.4465%" y="271.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="0.1965%" y="245" width="0.0197%" height="15" fill="rgb(215,43,3)" fg:x="10" fg:w="1"/><text x="0.4465%" y="255.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.1965%" y="229" width="0.0197%" height="15" fill="rgb(238,154,13)" fg:x="10" fg:w="1"/><text x="0.4465%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="0.1965%" y="213" width="0.0197%" height="15" fill="rgb(219,56,2)" fg:x="10" fg:w="1"/><text x="0.4465%" y="223.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.1965%" y="197" width="0.0197%" height="15" fill="rgb(233,0,4)" fg:x="10" fg:w="1"/><text x="0.4465%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.1965%" y="181" width="0.0197%" height="15" fill="rgb(235,30,7)" fg:x="10" fg:w="1"/><text x="0.4465%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.1965%" y="165" width="0.0197%" height="15" fill="rgb(250,79,13)" fg:x="10" fg:w="1"/><text x="0.4465%" y="175.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="0.1965%" y="149" width="0.0197%" height="15" fill="rgb(211,146,34)" fg:x="10" fg:w="1"/><text x="0.4465%" y="159.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.1965%" y="133" width="0.0197%" height="15" fill="rgb(228,22,38)" fg:x="10" fg:w="1"/><text x="0.4465%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="0.1965%" y="117" width="0.0197%" height="15" fill="rgb(235,168,5)" fg:x="10" fg:w="1"/><text x="0.4465%" y="127.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="0.1965%" y="101" width="0.0197%" height="15" fill="rgb(221,155,16)" fg:x="10" fg:w="1"/><text x="0.4465%" y="111.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="0.1965%" y="85" width="0.0197%" height="15" fill="rgb(215,215,53)" fg:x="10" fg:w="1"/><text x="0.4465%" y="95.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.1965%" y="69" width="0.0197%" height="15" fill="rgb(223,4,10)" fg:x="10" fg:w="1"/><text x="0.4465%" y="79.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.1965%" y="53" width="0.0197%" height="15" fill="rgb(234,103,6)" fg:x="10" fg:w="1"/><text x="0.4465%" y="63.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.1965%" y="37" width="0.0197%" height="15" fill="rgb(227,97,0)" fg:x="10" fg:w="1"/><text x="0.4465%" y="47.50"></text></g><g><title>&lt;core::str::iter::Chars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.2162%" y="341" width="0.0197%" height="15" fill="rgb(234,150,53)" fg:x="11" fg:w="1"/><text x="0.4662%" y="351.50"></text></g><g><title>core::str::validations::next_code_point (1 samples, 0.02%)</title><rect x="0.2162%" y="325" width="0.0197%" height="15" fill="rgb(228,201,54)" fg:x="11" fg:w="1"/><text x="0.4662%" y="335.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.02%)</title><rect x="0.2162%" y="309" width="0.0197%" height="15" fill="rgb(222,22,37)" fg:x="11" fg:w="1"/><text x="0.4662%" y="319.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.2162%" y="293" width="0.0197%" height="15" fill="rgb(237,53,32)" fg:x="11" fg:w="1"/><text x="0.4662%" y="303.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.2162%" y="277" width="0.0197%" height="15" fill="rgb(233,25,53)" fg:x="11" fg:w="1"/><text x="0.4662%" y="287.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.2162%" y="261" width="0.0197%" height="15" fill="rgb(210,40,34)" fg:x="11" fg:w="1"/><text x="0.4662%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (4 samples, 0.08%)</title><rect x="0.1769%" y="757" width="0.0786%" height="15" fill="rgb(241,220,44)" fg:x="9" fg:w="4"/><text x="0.4269%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (4 samples, 0.08%)</title><rect x="0.1769%" y="741" width="0.0786%" height="15" fill="rgb(235,28,35)" fg:x="9" fg:w="4"/><text x="0.4269%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (4 samples, 0.08%)</title><rect x="0.1769%" y="725" width="0.0786%" height="15" fill="rgb(210,56,17)" fg:x="9" fg:w="4"/><text x="0.4269%" y="735.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (4 samples, 0.08%)</title><rect x="0.1769%" y="709" width="0.0786%" height="15" fill="rgb(224,130,29)" fg:x="9" fg:w="4"/><text x="0.4269%" y="719.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (4 samples, 0.08%)</title><rect x="0.1769%" y="693" width="0.0786%" height="15" fill="rgb(235,212,8)" fg:x="9" fg:w="4"/><text x="0.4269%" y="703.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (4 samples, 0.08%)</title><rect x="0.1769%" y="677" width="0.0786%" height="15" fill="rgb(223,33,50)" fg:x="9" fg:w="4"/><text x="0.4269%" y="687.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph_with_options::{{closure}} (4 samples, 0.08%)</title><rect x="0.1769%" y="661" width="0.0786%" height="15" fill="rgb(219,149,13)" fg:x="9" fg:w="4"/><text x="0.4269%" y="671.50"></text></g><g><title>core::fmt::Write::write_fmt (4 samples, 0.08%)</title><rect x="0.1769%" y="645" width="0.0786%" height="15" fill="rgb(250,156,29)" fg:x="9" fg:w="4"/><text x="0.4269%" y="655.50"></text></g><g><title>core::fmt::write (4 samples, 0.08%)</title><rect x="0.1769%" y="629" width="0.0786%" height="15" fill="rgb(216,193,19)" fg:x="9" fg:w="4"/><text x="0.4269%" y="639.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (4 samples, 0.08%)</title><rect x="0.1769%" y="613" width="0.0786%" height="15" fill="rgb(216,135,14)" fg:x="9" fg:w="4"/><text x="0.4269%" y="623.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (4 samples, 0.08%)</title><rect x="0.1769%" y="597" width="0.0786%" height="15" fill="rgb(241,47,5)" fg:x="9" fg:w="4"/><text x="0.4269%" y="607.50"></text></g><g><title>pprof::frames::Symbol::name (4 samples, 0.08%)</title><rect x="0.1769%" y="581" width="0.0786%" height="15" fill="rgb(233,42,35)" fg:x="9" fg:w="4"/><text x="0.4269%" y="591.50"></text></g><g><title>symbolic_demangle::demangle (4 samples, 0.08%)</title><rect x="0.1769%" y="565" width="0.0786%" height="15" fill="rgb(231,13,6)" fg:x="9" fg:w="4"/><text x="0.4269%" y="575.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (4 samples, 0.08%)</title><rect x="0.1769%" y="549" width="0.0786%" height="15" fill="rgb(207,181,40)" fg:x="9" fg:w="4"/><text x="0.4269%" y="559.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (3 samples, 0.06%)</title><rect x="0.1965%" y="533" width="0.0590%" height="15" fill="rgb(254,173,49)" fg:x="10" fg:w="3"/><text x="0.4465%" y="543.50"></text></g><g><title>alloc::fmt::format (3 samples, 0.06%)</title><rect x="0.1965%" y="517" width="0.0590%" height="15" fill="rgb(221,1,38)" fg:x="10" fg:w="3"/><text x="0.4465%" y="527.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="501" width="0.0590%" height="15" fill="rgb(206,124,46)" fg:x="10" fg:w="3"/><text x="0.4465%" y="511.50"></text></g><g><title>core::fmt::write (3 samples, 0.06%)</title><rect x="0.1965%" y="485" width="0.0590%" height="15" fill="rgb(249,21,11)" fg:x="10" fg:w="3"/><text x="0.4465%" y="495.50"></text></g><g><title>core::fmt::run (3 samples, 0.06%)</title><rect x="0.1965%" y="469" width="0.0590%" height="15" fill="rgb(222,201,40)" fg:x="10" fg:w="3"/><text x="0.4465%" y="479.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="453" width="0.0590%" height="15" fill="rgb(235,61,29)" fg:x="10" fg:w="3"/><text x="0.4465%" y="463.50"></text></g><g><title>core::fmt::Write::write_fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="437" width="0.0590%" height="15" fill="rgb(219,207,3)" fg:x="10" fg:w="3"/><text x="0.4465%" y="447.50"></text></g><g><title>core::fmt::write (3 samples, 0.06%)</title><rect x="0.1965%" y="421" width="0.0590%" height="15" fill="rgb(222,56,46)" fg:x="10" fg:w="3"/><text x="0.4465%" y="431.50"></text></g><g><title>core::fmt::run (3 samples, 0.06%)</title><rect x="0.1965%" y="405" width="0.0590%" height="15" fill="rgb(239,76,54)" fg:x="10" fg:w="3"/><text x="0.4465%" y="415.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="389" width="0.0590%" height="15" fill="rgb(231,124,27)" fg:x="10" fg:w="3"/><text x="0.4465%" y="399.50"></text></g><g><title>&lt;rustc_demangle::DemangleStyle as core::fmt::Display&gt;::fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="373" width="0.0590%" height="15" fill="rgb(249,195,6)" fg:x="10" fg:w="3"/><text x="0.4465%" y="383.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (3 samples, 0.06%)</title><rect x="0.1965%" y="357" width="0.0590%" height="15" fill="rgb(237,174,47)" fg:x="10" fg:w="3"/><text x="0.4465%" y="367.50"></text></g><g><title>core::str::&lt;impl str&gt;::starts_with (1 samples, 0.02%)</title><rect x="0.2358%" y="341" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="12" fg:w="1"/><text x="0.4858%" y="351.50"></text></g><g><title>&lt;char as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.02%)</title><rect x="0.2358%" y="325" width="0.0197%" height="15" fill="rgb(231,57,52)" fg:x="12" fg:w="1"/><text x="0.4858%" y="335.50"></text></g><g><title>&lt;&amp;str as core::str::pattern::Pattern&gt;::is_prefix_of (1 samples, 0.02%)</title><rect x="0.2358%" y="309" width="0.0197%" height="15" fill="rgb(248,177,22)" fg:x="12" fg:w="1"/><text x="0.4858%" y="319.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::starts_with (1 samples, 0.02%)</title><rect x="0.2358%" y="293" width="0.0197%" height="15" fill="rgb(215,211,37)" fg:x="12" fg:w="1"/><text x="0.4858%" y="303.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.02%)</title><rect x="0.2358%" y="277" width="0.0197%" height="15" fill="rgb(241,128,51)" fg:x="12" fg:w="1"/><text x="0.4858%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeTo&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.2358%" y="261" width="0.0197%" height="15" fill="rgb(227,165,31)" fg:x="12" fg:w="1"/><text x="0.4858%" y="271.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.02%)</title><rect x="0.2358%" y="245" width="0.0197%" height="15" fill="rgb(228,167,24)" fg:x="12" fg:w="1"/><text x="0.4858%" y="255.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.02%)</title><rect x="0.2358%" y="229" width="0.0197%" height="15" fill="rgb(228,143,12)" fg:x="12" fg:w="1"/><text x="0.4858%" y="239.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.2358%" y="213" width="0.0197%" height="15" fill="rgb(249,149,8)" fg:x="12" fg:w="1"/><text x="0.4858%" y="223.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.2358%" y="197" width="0.0197%" height="15" fill="rgb(243,35,44)" fg:x="12" fg:w="1"/><text x="0.4858%" y="207.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.2358%" y="181" width="0.0197%" height="15" fill="rgb(246,89,9)" fg:x="12" fg:w="1"/><text x="0.4858%" y="191.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (5 samples, 0.10%)</title><rect x="0.1769%" y="805" width="0.0983%" height="15" fill="rgb(233,213,13)" fg:x="9" fg:w="5"/><text x="0.4269%" y="815.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (5 samples, 0.10%)</title><rect x="0.1769%" y="789" width="0.0983%" height="15" fill="rgb(233,141,41)" fg:x="9" fg:w="5"/><text x="0.4269%" y="799.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5 samples, 0.10%)</title><rect x="0.1769%" y="773" width="0.0983%" height="15" fill="rgb(239,167,4)" fg:x="9" fg:w="5"/><text x="0.4269%" y="783.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.02%)</title><rect x="0.2555%" y="757" width="0.0197%" height="15" fill="rgb(209,217,16)" fg:x="13" fg:w="1"/><text x="0.5055%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.2555%" y="741" width="0.0197%" height="15" fill="rgb(219,88,35)" fg:x="13" fg:w="1"/><text x="0.5055%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.2555%" y="725" width="0.0197%" height="15" fill="rgb(220,193,23)" fg:x="13" fg:w="1"/><text x="0.5055%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.2555%" y="709" width="0.0197%" height="15" fill="rgb(230,90,52)" fg:x="13" fg:w="1"/><text x="0.5055%" y="719.50"></text></g><g><title>inferno::flamegraph::filled_rectangle (1 samples, 0.02%)</title><rect x="0.2752%" y="789" width="0.0197%" height="15" fill="rgb(252,106,19)" fg:x="14" fg:w="1"/><text x="0.5252%" y="799.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (1 samples, 0.02%)</title><rect x="0.2752%" y="773" width="0.0197%" height="15" fill="rgb(206,74,20)" fg:x="14" fg:w="1"/><text x="0.5252%" y="783.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_wrapped (1 samples, 0.02%)</title><rect x="0.2752%" y="757" width="0.0197%" height="15" fill="rgb(230,138,44)" fg:x="14" fg:w="1"/><text x="0.5252%" y="767.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (1 samples, 0.02%)</title><rect x="0.2752%" y="741" width="0.0197%" height="15" fill="rgb(235,182,43)" fg:x="14" fg:w="1"/><text x="0.5252%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="0.2752%" y="725" width="0.0197%" height="15" fill="rgb(242,16,51)" fg:x="14" fg:w="1"/><text x="0.5252%" y="735.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.02%)</title><rect x="0.2752%" y="709" width="0.0197%" height="15" fill="rgb(248,9,4)" fg:x="14" fg:w="1"/><text x="0.5252%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.02%)</title><rect x="0.2752%" y="693" width="0.0197%" height="15" fill="rgb(210,31,22)" fg:x="14" fg:w="1"/><text x="0.5252%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.02%)</title><rect x="0.2752%" y="677" width="0.0197%" height="15" fill="rgb(239,54,39)" fg:x="14" fg:w="1"/><text x="0.5252%" y="687.50"></text></g><g><title>_write (1 samples, 0.02%)</title><rect x="0.2752%" y="661" width="0.0197%" height="15" fill="rgb(230,99,41)" fg:x="14" fg:w="1"/><text x="0.5252%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.2752%" y="645" width="0.0197%" height="15" fill="rgb(253,106,12)" fg:x="14" fg:w="1"/><text x="0.5252%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.2752%" y="629" width="0.0197%" height="15" fill="rgb(213,46,41)" fg:x="14" fg:w="1"/><text x="0.5252%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.2752%" y="613" width="0.0197%" height="15" fill="rgb(215,133,35)" fg:x="14" fg:w="1"/><text x="0.5252%" y="623.50"></text></g><g><title>inferno::flamegraph::svg::write_header (1 samples, 0.02%)</title><rect x="0.2948%" y="789" width="0.0197%" height="15" fill="rgb(213,28,5)" fg:x="15" fg:w="1"/><text x="0.5448%" y="799.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (1 samples, 0.02%)</title><rect x="0.2948%" y="773" width="0.0197%" height="15" fill="rgb(215,77,49)" fg:x="15" fg:w="1"/><text x="0.5448%" y="783.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_wrapped (1 samples, 0.02%)</title><rect x="0.2948%" y="757" width="0.0197%" height="15" fill="rgb(248,100,22)" fg:x="15" fg:w="1"/><text x="0.5448%" y="767.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (1 samples, 0.02%)</title><rect x="0.2948%" y="741" width="0.0197%" height="15" fill="rgb(208,67,9)" fg:x="15" fg:w="1"/><text x="0.5448%" y="751.50"></text></g><g><title>std::io::Write::write_all (1 samples, 0.02%)</title><rect x="0.2948%" y="725" width="0.0197%" height="15" fill="rgb(219,133,21)" fg:x="15" fg:w="1"/><text x="0.5448%" y="735.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (1 samples, 0.02%)</title><rect x="0.2948%" y="709" width="0.0197%" height="15" fill="rgb(246,46,29)" fg:x="15" fg:w="1"/><text x="0.5448%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::write (1 samples, 0.02%)</title><rect x="0.2948%" y="693" width="0.0197%" height="15" fill="rgb(246,185,52)" fg:x="15" fg:w="1"/><text x="0.5448%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.02%)</title><rect x="0.2948%" y="677" width="0.0197%" height="15" fill="rgb(252,136,11)" fg:x="15" fg:w="1"/><text x="0.5448%" y="687.50"></text></g><g><title>_write (1 samples, 0.02%)</title><rect x="0.2948%" y="661" width="0.0197%" height="15" fill="rgb(219,138,53)" fg:x="15" fg:w="1"/><text x="0.5448%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.2948%" y="645" width="0.0197%" height="15" fill="rgb(211,51,23)" fg:x="15" fg:w="1"/><text x="0.5448%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.2948%" y="629" width="0.0197%" height="15" fill="rgb(247,221,28)" fg:x="15" fg:w="1"/><text x="0.5448%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.2948%" y="613" width="0.0197%" height="15" fill="rgb(251,222,45)" fg:x="15" fg:w="1"/><text x="0.5448%" y="623.50"></text></g><g><title>inferno::flamegraph::svg::write_str (2 samples, 0.04%)</title><rect x="0.3145%" y="789" width="0.0393%" height="15" fill="rgb(217,162,53)" fg:x="16" fg:w="2"/><text x="0.5645%" y="799.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (2 samples, 0.04%)</title><rect x="0.3145%" y="773" width="0.0393%" height="15" fill="rgb(229,93,14)" fg:x="16" fg:w="2"/><text x="0.5645%" y="783.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_wrapped (2 samples, 0.04%)</title><rect x="0.3145%" y="757" width="0.0393%" height="15" fill="rgb(209,67,49)" fg:x="16" fg:w="2"/><text x="0.5645%" y="767.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (2 samples, 0.04%)</title><rect x="0.3145%" y="741" width="0.0393%" height="15" fill="rgb(213,87,29)" fg:x="16" fg:w="2"/><text x="0.5645%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.04%)</title><rect x="0.3145%" y="725" width="0.0393%" height="15" fill="rgb(205,151,52)" fg:x="16" fg:w="2"/><text x="0.5645%" y="735.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.04%)</title><rect x="0.3145%" y="709" width="0.0393%" height="15" fill="rgb(253,215,39)" fg:x="16" fg:w="2"/><text x="0.5645%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.04%)</title><rect x="0.3145%" y="693" width="0.0393%" height="15" fill="rgb(221,220,41)" fg:x="16" fg:w="2"/><text x="0.5645%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.04%)</title><rect x="0.3145%" y="677" width="0.0393%" height="15" fill="rgb(218,133,21)" fg:x="16" fg:w="2"/><text x="0.5645%" y="687.50"></text></g><g><title>_write (2 samples, 0.04%)</title><rect x="0.3145%" y="661" width="0.0393%" height="15" fill="rgb(221,193,43)" fg:x="16" fg:w="2"/><text x="0.5645%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="0.3145%" y="645" width="0.0393%" height="15" fill="rgb(240,128,52)" fg:x="16" fg:w="2"/><text x="0.5645%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.04%)</title><rect x="0.3145%" y="629" width="0.0393%" height="15" fill="rgb(253,114,12)" fg:x="16" fg:w="2"/><text x="0.5645%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.04%)</title><rect x="0.3145%" y="613" width="0.0393%" height="15" fill="rgb(215,223,47)" fg:x="16" fg:w="2"/><text x="0.5645%" y="623.50"></text></g><g><title>inferno::flamegraph::write_container_start (2 samples, 0.04%)</title><rect x="0.3538%" y="789" width="0.0393%" height="15" fill="rgb(248,225,23)" fg:x="18" fg:w="2"/><text x="0.6038%" y="799.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (2 samples, 0.04%)</title><rect x="0.3538%" y="773" width="0.0393%" height="15" fill="rgb(250,108,0)" fg:x="18" fg:w="2"/><text x="0.6038%" y="783.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_wrapped (2 samples, 0.04%)</title><rect x="0.3538%" y="757" width="0.0393%" height="15" fill="rgb(228,208,7)" fg:x="18" fg:w="2"/><text x="0.6038%" y="767.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (2 samples, 0.04%)</title><rect x="0.3538%" y="741" width="0.0393%" height="15" fill="rgb(244,45,10)" fg:x="18" fg:w="2"/><text x="0.6038%" y="751.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.04%)</title><rect x="0.3538%" y="725" width="0.0393%" height="15" fill="rgb(207,125,25)" fg:x="18" fg:w="2"/><text x="0.6038%" y="735.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.04%)</title><rect x="0.3538%" y="709" width="0.0393%" height="15" fill="rgb(210,195,18)" fg:x="18" fg:w="2"/><text x="0.6038%" y="719.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.04%)</title><rect x="0.3538%" y="693" width="0.0393%" height="15" fill="rgb(249,80,12)" fg:x="18" fg:w="2"/><text x="0.6038%" y="703.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.04%)</title><rect x="0.3538%" y="677" width="0.0393%" height="15" fill="rgb(221,65,9)" fg:x="18" fg:w="2"/><text x="0.6038%" y="687.50"></text></g><g><title>_write (2 samples, 0.04%)</title><rect x="0.3538%" y="661" width="0.0393%" height="15" fill="rgb(235,49,36)" fg:x="18" fg:w="2"/><text x="0.6038%" y="671.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="0.3538%" y="645" width="0.0393%" height="15" fill="rgb(225,32,20)" fg:x="18" fg:w="2"/><text x="0.6038%" y="655.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.04%)</title><rect x="0.3538%" y="629" width="0.0393%" height="15" fill="rgb(215,141,46)" fg:x="18" fg:w="2"/><text x="0.6038%" y="639.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.04%)</title><rect x="0.3538%" y="613" width="0.0393%" height="15" fill="rgb(250,160,47)" fg:x="18" fg:w="2"/><text x="0.6038%" y="623.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (2 samples, 0.04%)</title><rect x="0.3931%" y="773" width="0.0393%" height="15" fill="rgb(216,222,40)" fg:x="20" fg:w="2"/><text x="0.6431%" y="783.50"></text></g><g><title>std::io::Write::write_all (2 samples, 0.04%)</title><rect x="0.3931%" y="757" width="0.0393%" height="15" fill="rgb(234,217,39)" fg:x="20" fg:w="2"/><text x="0.6431%" y="767.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (2 samples, 0.04%)</title><rect x="0.3931%" y="741" width="0.0393%" height="15" fill="rgb(207,178,40)" fg:x="20" fg:w="2"/><text x="0.6431%" y="751.50"></text></g><g><title>std::sys::unix::net::Socket::write (2 samples, 0.04%)</title><rect x="0.3931%" y="725" width="0.0393%" height="15" fill="rgb(221,136,13)" fg:x="20" fg:w="2"/><text x="0.6431%" y="735.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.04%)</title><rect x="0.3931%" y="709" width="0.0393%" height="15" fill="rgb(249,199,10)" fg:x="20" fg:w="2"/><text x="0.6431%" y="719.50"></text></g><g><title>_write (2 samples, 0.04%)</title><rect x="0.3931%" y="693" width="0.0393%" height="15" fill="rgb(249,222,13)" fg:x="20" fg:w="2"/><text x="0.6431%" y="703.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="0.3931%" y="677" width="0.0393%" height="15" fill="rgb(244,185,38)" fg:x="20" fg:w="2"/><text x="0.6431%" y="687.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.04%)</title><rect x="0.3931%" y="661" width="0.0393%" height="15" fill="rgb(236,202,9)" fg:x="20" fg:w="2"/><text x="0.6431%" y="671.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.04%)</title><rect x="0.3931%" y="645" width="0.0393%" height="15" fill="rgb(250,229,37)" fg:x="20" fg:w="2"/><text x="0.6431%" y="655.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph (19 samples, 0.37%)</title><rect x="0.1572%" y="837" width="0.3734%" height="15" fill="rgb(206,174,23)" fg:x="8" fg:w="19"/><text x="0.4072%" y="847.50"></text></g><g><title>pprof::report::flamegraph::&lt;impl pprof::report::Report&gt;::flamegraph_with_options (18 samples, 0.35%)</title><rect x="0.1769%" y="821" width="0.3538%" height="15" fill="rgb(211,33,43)" fg:x="9" fg:w="18"/><text x="0.4269%" y="831.50"></text></g><g><title>inferno::flamegraph::from_lines (13 samples, 0.26%)</title><rect x="0.2752%" y="805" width="0.2555%" height="15" fill="rgb(245,58,50)" fg:x="14" fg:w="13"/><text x="0.5252%" y="815.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_event (7 samples, 0.14%)</title><rect x="0.3931%" y="789" width="0.1376%" height="15" fill="rgb(244,68,36)" fg:x="20" fg:w="7"/><text x="0.6431%" y="799.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write_wrapped (5 samples, 0.10%)</title><rect x="0.4324%" y="773" width="0.0983%" height="15" fill="rgb(232,229,15)" fg:x="22" fg:w="5"/><text x="0.6824%" y="783.50"></text></g><g><title>quick_xml::writer::Writer&lt;W&gt;::write (5 samples, 0.10%)</title><rect x="0.4324%" y="757" width="0.0983%" height="15" fill="rgb(254,30,23)" fg:x="22" fg:w="5"/><text x="0.6824%" y="767.50"></text></g><g><title>std::io::Write::write_all (5 samples, 0.10%)</title><rect x="0.4324%" y="741" width="0.0983%" height="15" fill="rgb(235,160,14)" fg:x="22" fg:w="5"/><text x="0.6824%" y="751.50"></text></g><g><title>std::os::unix::net::datagram::UnixDatagram::send (5 samples, 0.10%)</title><rect x="0.4324%" y="725" width="0.0983%" height="15" fill="rgb(212,155,44)" fg:x="22" fg:w="5"/><text x="0.6824%" y="735.50"></text></g><g><title>std::sys::unix::net::Socket::write (5 samples, 0.10%)</title><rect x="0.4324%" y="709" width="0.0983%" height="15" fill="rgb(226,2,50)" fg:x="22" fg:w="5"/><text x="0.6824%" y="719.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (5 samples, 0.10%)</title><rect x="0.4324%" y="693" width="0.0983%" height="15" fill="rgb(234,177,6)" fg:x="22" fg:w="5"/><text x="0.6824%" y="703.50"></text></g><g><title>_write (5 samples, 0.10%)</title><rect x="0.4324%" y="677" width="0.0983%" height="15" fill="rgb(217,24,9)" fg:x="22" fg:w="5"/><text x="0.6824%" y="687.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5 samples, 0.10%)</title><rect x="0.4324%" y="661" width="0.0983%" height="15" fill="rgb(220,13,46)" fg:x="22" fg:w="5"/><text x="0.6824%" y="671.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (5 samples, 0.10%)</title><rect x="0.4324%" y="645" width="0.0983%" height="15" fill="rgb(239,221,27)" fg:x="22" fg:w="5"/><text x="0.6824%" y="655.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (5 samples, 0.10%)</title><rect x="0.4324%" y="629" width="0.0983%" height="15" fill="rgb(222,198,25)" fg:x="22" fg:w="5"/><text x="0.6824%" y="639.50"></text></g><g><title>pprof_rs_demo::flamegraph::flamegraph::is_prime_number1 (1 samples, 0.02%)</title><rect x="0.5307%" y="837" width="0.0197%" height="15" fill="rgb(211,99,13)" fg:x="27" fg:w="1"/><text x="0.7807%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.5307%" y="821" width="0.0197%" height="15" fill="rgb(232,111,31)" fg:x="27" fg:w="1"/><text x="0.7807%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.5307%" y="805" width="0.0197%" height="15" fill="rgb(245,82,37)" fg:x="27" fg:w="1"/><text x="0.7807%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.5307%" y="789" width="0.0197%" height="15" fill="rgb(227,149,46)" fg:x="27" fg:w="1"/><text x="0.7807%" y="799.50"></text></g><g><title>pprof_rs_demo::flamegraph::flamegraph::is_prime_number2 (1 samples, 0.02%)</title><rect x="0.5503%" y="837" width="0.0197%" height="15" fill="rgb(218,36,50)" fg:x="28" fg:w="1"/><text x="0.8003%" y="847.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.5503%" y="821" width="0.0197%" height="15" fill="rgb(226,80,48)" fg:x="28" fg:w="1"/><text x="0.8003%" y="831.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.5503%" y="805" width="0.0197%" height="15" fill="rgb(238,224,15)" fg:x="28" fg:w="1"/><text x="0.8003%" y="815.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.5503%" y="789" width="0.0197%" height="15" fill="rgb(241,136,10)" fg:x="28" fg:w="1"/><text x="0.8003%" y="799.50"></text></g><g><title>&lt;usize as core::ops::arith::Rem&lt;&amp;usize&gt;&gt;::rem (1 samples, 0.02%)</title><rect x="0.5700%" y="821" width="0.0197%" height="15" fill="rgb(208,32,45)" fg:x="29" fg:w="1"/><text x="0.8200%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.5700%" y="805" width="0.0197%" height="15" fill="rgb(207,135,9)" fg:x="29" fg:w="1"/><text x="0.8200%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.5700%" y="789" width="0.0197%" height="15" fill="rgb(206,86,44)" fg:x="29" fg:w="1"/><text x="0.8200%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.5700%" y="773" width="0.0197%" height="15" fill="rgb(245,177,15)" fg:x="29" fg:w="1"/><text x="0.8200%" y="783.50"></text></g><g><title>pprof_rs_demo::flamegraph::flamegraph::is_prime_number3 (2 samples, 0.04%)</title><rect x="0.5700%" y="837" width="0.0393%" height="15" fill="rgb(206,64,50)" fg:x="29" fg:w="2"/><text x="0.8200%" y="847.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (1 samples, 0.02%)</title><rect x="0.5896%" y="821" width="0.0197%" height="15" fill="rgb(234,36,40)" fg:x="30" fg:w="1"/><text x="0.8396%" y="831.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.5896%" y="805" width="0.0197%" height="15" fill="rgb(213,64,8)" fg:x="30" fg:w="1"/><text x="0.8396%" y="815.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.5896%" y="789" width="0.0197%" height="15" fill="rgb(210,75,36)" fg:x="30" fg:w="1"/><text x="0.8396%" y="799.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.5896%" y="773" width="0.0197%" height="15" fill="rgb(229,88,21)" fg:x="30" fg:w="1"/><text x="0.8396%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::io::stdio::StdoutLock&gt; (1 samples, 0.02%)</title><rect x="0.6093%" y="773" width="0.0197%" height="15" fill="rgb(252,204,47)" fg:x="31" fg:w="1"/><text x="0.8593%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;core::cell::RefCell&lt;std::io::buffered::linewriter::LineWriter&lt;std::io::stdio::StdoutRaw&gt;&gt;&gt;&gt; (1 samples, 0.02%)</title><rect x="0.6093%" y="757" width="0.0197%" height="15" fill="rgb(208,77,27)" fg:x="31" fg:w="1"/><text x="0.8593%" y="767.50"></text></g><g><title>&lt;std::sys_common::remutex::ReentrantMutexGuard&lt;T&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.02%)</title><rect x="0.6093%" y="741" width="0.0197%" height="15" fill="rgb(221,76,26)" fg:x="31" fg:w="1"/><text x="0.8593%" y="751.50"></text></g><g><title>std::sys::unix::locks::pthread_mutex::Mutex::unlock (1 samples, 0.02%)</title><rect x="0.6093%" y="725" width="0.0197%" height="15" fill="rgb(225,139,18)" fg:x="31" fg:w="1"/><text x="0.8593%" y="735.50"></text></g><g><title>_pthread_mutex_unlock (1 samples, 0.02%)</title><rect x="0.6093%" y="709" width="0.0197%" height="15" fill="rgb(230,137,11)" fg:x="31" fg:w="1"/><text x="0.8593%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.6093%" y="693" width="0.0197%" height="15" fill="rgb(212,28,1)" fg:x="31" fg:w="1"/><text x="0.8593%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.6093%" y="677" width="0.0197%" height="15" fill="rgb(248,164,17)" fg:x="31" fg:w="1"/><text x="0.8593%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.6093%" y="661" width="0.0197%" height="15" fill="rgb(222,171,42)" fg:x="31" fg:w="1"/><text x="0.8593%" y="671.50"></text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (1 samples, 0.02%)</title><rect x="0.6289%" y="757" width="0.0197%" height="15" fill="rgb(243,84,45)" fg:x="32" fg:w="1"/><text x="0.8789%" y="767.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.6289%" y="741" width="0.0197%" height="15" fill="rgb(252,49,23)" fg:x="32" fg:w="1"/><text x="0.8789%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.6289%" y="725" width="0.0197%" height="15" fill="rgb(215,19,7)" fg:x="32" fg:w="1"/><text x="0.8789%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.6289%" y="709" width="0.0197%" height="15" fill="rgb(238,81,41)" fg:x="32" fg:w="1"/><text x="0.8789%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="0.6486%" y="741" width="0.0393%" height="15" fill="rgb(210,199,37)" fg:x="33" fg:w="2"/><text x="0.8986%" y="751.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.04%)</title><rect x="0.6486%" y="725" width="0.0393%" height="15" fill="rgb(244,192,49)" fg:x="33" fg:w="2"/><text x="0.8986%" y="735.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.04%)</title><rect x="0.6486%" y="709" width="0.0393%" height="15" fill="rgb(226,211,11)" fg:x="33" fg:w="2"/><text x="0.8986%" y="719.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (3 samples, 0.06%)</title><rect x="0.6879%" y="597" width="0.0590%" height="15" fill="rgb(236,162,54)" fg:x="35" fg:w="3"/><text x="0.9379%" y="607.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (3 samples, 0.06%)</title><rect x="0.6879%" y="581" width="0.0590%" height="15" fill="rgb(220,229,9)" fg:x="35" fg:w="3"/><text x="0.9379%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.06%)</title><rect x="0.6879%" y="565" width="0.0590%" height="15" fill="rgb(250,87,22)" fg:x="35" fg:w="3"/><text x="0.9379%" y="575.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.06%)</title><rect x="0.6879%" y="549" width="0.0590%" height="15" fill="rgb(239,43,17)" fg:x="35" fg:w="3"/><text x="0.9379%" y="559.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (3 samples, 0.06%)</title><rect x="0.6879%" y="533" width="0.0590%" height="15" fill="rgb(231,177,25)" fg:x="35" fg:w="3"/><text x="0.9379%" y="543.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (3 samples, 0.06%)</title><rect x="0.6879%" y="517" width="0.0590%" height="15" fill="rgb(219,179,1)" fg:x="35" fg:w="3"/><text x="0.9379%" y="527.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (3 samples, 0.06%)</title><rect x="0.6879%" y="501" width="0.0590%" height="15" fill="rgb(238,219,53)" fg:x="35" fg:w="3"/><text x="0.9379%" y="511.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (3 samples, 0.06%)</title><rect x="0.6879%" y="485" width="0.0590%" height="15" fill="rgb(232,167,36)" fg:x="35" fg:w="3"/><text x="0.9379%" y="495.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (3 samples, 0.06%)</title><rect x="0.6879%" y="469" width="0.0590%" height="15" fill="rgb(244,19,51)" fg:x="35" fg:w="3"/><text x="0.9379%" y="479.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (3 samples, 0.06%)</title><rect x="0.6879%" y="453" width="0.0590%" height="15" fill="rgb(224,6,22)" fg:x="35" fg:w="3"/><text x="0.9379%" y="463.50"></text></g><g><title>_write (3 samples, 0.06%)</title><rect x="0.6879%" y="437" width="0.0590%" height="15" fill="rgb(224,145,5)" fg:x="35" fg:w="3"/><text x="0.9379%" y="447.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (3 samples, 0.06%)</title><rect x="0.6879%" y="421" width="0.0590%" height="15" fill="rgb(234,130,49)" fg:x="35" fg:w="3"/><text x="0.9379%" y="431.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (3 samples, 0.06%)</title><rect x="0.6879%" y="405" width="0.0590%" height="15" fill="rgb(254,6,2)" fg:x="35" fg:w="3"/><text x="0.9379%" y="415.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (3 samples, 0.06%)</title><rect x="0.6879%" y="389" width="0.0590%" height="15" fill="rgb(208,96,46)" fg:x="35" fg:w="3"/><text x="0.9379%" y="399.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.02%)</title><rect x="0.7469%" y="485" width="0.0197%" height="15" fill="rgb(239,3,39)" fg:x="38" fg:w="1"/><text x="0.9969%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.7469%" y="469" width="0.0197%" height="15" fill="rgb(233,210,1)" fg:x="38" fg:w="1"/><text x="0.9969%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.7469%" y="453" width="0.0197%" height="15" fill="rgb(244,137,37)" fg:x="38" fg:w="1"/><text x="0.9969%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.7469%" y="437" width="0.0197%" height="15" fill="rgb(240,136,2)" fg:x="38" fg:w="1"/><text x="0.9969%" y="447.50"></text></g><g><title>rustc_demangle::try_demangle (2 samples, 0.04%)</title><rect x="0.7469%" y="533" width="0.0393%" height="15" fill="rgb(239,18,37)" fg:x="38" fg:w="2"/><text x="0.9969%" y="543.50"></text></g><g><title>rustc_demangle::demangle (2 samples, 0.04%)</title><rect x="0.7469%" y="517" width="0.0393%" height="15" fill="rgb(218,185,22)" fg:x="38" fg:w="2"/><text x="0.9969%" y="527.50"></text></g><g><title>rustc_demangle::legacy::demangle (2 samples, 0.04%)</title><rect x="0.7469%" y="501" width="0.0393%" height="15" fill="rgb(225,218,4)" fg:x="38" fg:w="2"/><text x="0.9969%" y="511.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.02%)</title><rect x="0.7665%" y="485" width="0.0197%" height="15" fill="rgb(230,182,32)" fg:x="39" fg:w="1"/><text x="1.0165%" y="495.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.7665%" y="469" width="0.0197%" height="15" fill="rgb(242,56,43)" fg:x="39" fg:w="1"/><text x="1.0165%" y="479.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.7665%" y="453" width="0.0197%" height="15" fill="rgb(233,99,24)" fg:x="39" fg:w="1"/><text x="1.0165%" y="463.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.7665%" y="437" width="0.0197%" height="15" fill="rgb(234,209,42)" fg:x="39" fg:w="1"/><text x="1.0165%" y="447.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::detect_language (3 samples, 0.06%)</title><rect x="0.7469%" y="549" width="0.0590%" height="15" fill="rgb(227,7,12)" fg:x="38" fg:w="3"/><text x="0.9969%" y="559.50"></text></g><g><title>symbolic_common::types::Name::as_str (1 samples, 0.02%)</title><rect x="0.7862%" y="533" width="0.0197%" height="15" fill="rgb(245,203,43)" fg:x="40" fg:w="1"/><text x="1.0362%" y="543.50"></text></g><g><title>&lt;alloc::borrow::Cow&lt;B&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.02%)</title><rect x="0.7862%" y="517" width="0.0197%" height="15" fill="rgb(238,205,33)" fg:x="40" fg:w="1"/><text x="1.0362%" y="527.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.7862%" y="501" width="0.0197%" height="15" fill="rgb(231,56,7)" fg:x="40" fg:w="1"/><text x="1.0362%" y="511.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.7862%" y="485" width="0.0197%" height="15" fill="rgb(244,186,29)" fg:x="40" fg:w="1"/><text x="1.0362%" y="495.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.7862%" y="469" width="0.0197%" height="15" fill="rgb(234,111,31)" fg:x="40" fg:w="1"/><text x="1.0362%" y="479.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8058%" y="357" width="0.0197%" height="15" fill="rgb(241,149,10)" fg:x="41" fg:w="1"/><text x="1.0558%" y="367.50"></text></g><g><title>&lt;rustc_demangle::SizeLimitedFmtAdapter&lt;F&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8058%" y="341" width="0.0197%" height="15" fill="rgb(249,206,44)" fg:x="41" fg:w="1"/><text x="1.0558%" y="351.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8058%" y="325" width="0.0197%" height="15" fill="rgb(251,153,30)" fg:x="41" fg:w="1"/><text x="1.0558%" y="335.50"></text></g><g><title>&lt;&amp;mut W as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8058%" y="309" width="0.0197%" height="15" fill="rgb(239,152,38)" fg:x="41" fg:w="1"/><text x="1.0558%" y="319.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8058%" y="293" width="0.0197%" height="15" fill="rgb(249,139,47)" fg:x="41" fg:w="1"/><text x="1.0558%" y="303.50"></text></g><g><title>alloc::string::String::push_str (1 samples, 0.02%)</title><rect x="0.8058%" y="277" width="0.0197%" height="15" fill="rgb(244,64,35)" fg:x="41" fg:w="1"/><text x="1.0558%" y="287.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_from_slice (1 samples, 0.02%)</title><rect x="0.8058%" y="261" width="0.0197%" height="15" fill="rgb(216,46,15)" fg:x="41" fg:w="1"/><text x="1.0558%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;&amp;T,core::slice::iter::Iter&lt;T&gt;&gt;&gt;::spec_extend (1 samples, 0.02%)</title><rect x="0.8058%" y="245" width="0.0197%" height="15" fill="rgb(250,74,19)" fg:x="41" fg:w="1"/><text x="1.0558%" y="255.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::append_elements (1 samples, 0.02%)</title><rect x="0.8058%" y="229" width="0.0197%" height="15" fill="rgb(249,42,33)" fg:x="41" fg:w="1"/><text x="1.0558%" y="239.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.8058%" y="213" width="0.0197%" height="15" fill="rgb(242,149,17)" fg:x="41" fg:w="1"/><text x="1.0558%" y="223.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.02%)</title><rect x="0.8058%" y="197" width="0.0197%" height="15" fill="rgb(244,29,21)" fg:x="41" fg:w="1"/><text x="1.0558%" y="207.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.02%)</title><rect x="0.8058%" y="181" width="0.0197%" height="15" fill="rgb(220,130,37)" fg:x="41" fg:w="1"/><text x="1.0558%" y="191.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.02%)</title><rect x="0.8058%" y="165" width="0.0197%" height="15" fill="rgb(211,67,2)" fg:x="41" fg:w="1"/><text x="1.0558%" y="175.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.02%)</title><rect x="0.8058%" y="149" width="0.0197%" height="15" fill="rgb(235,68,52)" fg:x="41" fg:w="1"/><text x="1.0558%" y="159.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.02%)</title><rect x="0.8058%" y="133" width="0.0197%" height="15" fill="rgb(246,142,3)" fg:x="41" fg:w="1"/><text x="1.0558%" y="143.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.02%)</title><rect x="0.8058%" y="117" width="0.0197%" height="15" fill="rgb(241,25,7)" fg:x="41" fg:w="1"/><text x="1.0558%" y="127.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.02%)</title><rect x="0.8058%" y="101" width="0.0197%" height="15" fill="rgb(242,119,39)" fg:x="41" fg:w="1"/><text x="1.0558%" y="111.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.8058%" y="85" width="0.0197%" height="15" fill="rgb(241,98,45)" fg:x="41" fg:w="1"/><text x="1.0558%" y="95.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.8058%" y="69" width="0.0197%" height="15" fill="rgb(254,28,30)" fg:x="41" fg:w="1"/><text x="1.0558%" y="79.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.8058%" y="53" width="0.0197%" height="15" fill="rgb(241,142,54)" fg:x="41" fg:w="1"/><text x="1.0558%" y="63.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="0.6879%" y="629" width="0.1572%" height="15" fill="rgb(222,85,15)" fg:x="35" fg:w="8"/><text x="0.9379%" y="639.50"></text></g><g><title>&lt;pprof::frames::Symbol as core::fmt::Display&gt;::fmt (8 samples, 0.16%)</title><rect x="0.6879%" y="613" width="0.1572%" height="15" fill="rgb(210,85,47)" fg:x="35" fg:w="8"/><text x="0.9379%" y="623.50"></text></g><g><title>pprof::frames::Symbol::name (5 samples, 0.10%)</title><rect x="0.7469%" y="597" width="0.0983%" height="15" fill="rgb(224,206,25)" fg:x="38" fg:w="5"/><text x="0.9969%" y="607.50"></text></g><g><title>symbolic_demangle::demangle (5 samples, 0.10%)</title><rect x="0.7469%" y="581" width="0.0983%" height="15" fill="rgb(243,201,19)" fg:x="38" fg:w="5"/><text x="0.9969%" y="591.50"></text></g><g><title>&lt;symbolic_common::types::Name as symbolic_demangle::Demangle&gt;::demangle (5 samples, 0.10%)</title><rect x="0.7469%" y="565" width="0.0983%" height="15" fill="rgb(236,59,4)" fg:x="38" fg:w="5"/><text x="0.9969%" y="575.50"></text></g><g><title>symbolic_demangle::try_demangle_rust (2 samples, 0.04%)</title><rect x="0.8058%" y="549" width="0.0393%" height="15" fill="rgb(254,179,45)" fg:x="41" fg:w="2"/><text x="1.0558%" y="559.50"></text></g><g><title>alloc::fmt::format (2 samples, 0.04%)</title><rect x="0.8058%" y="533" width="0.0393%" height="15" fill="rgb(226,14,10)" fg:x="41" fg:w="2"/><text x="1.0558%" y="543.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="517" width="0.0393%" height="15" fill="rgb(244,27,41)" fg:x="41" fg:w="2"/><text x="1.0558%" y="527.50"></text></g><g><title>core::fmt::write (2 samples, 0.04%)</title><rect x="0.8058%" y="501" width="0.0393%" height="15" fill="rgb(235,35,32)" fg:x="41" fg:w="2"/><text x="1.0558%" y="511.50"></text></g><g><title>core::fmt::run (2 samples, 0.04%)</title><rect x="0.8058%" y="485" width="0.0393%" height="15" fill="rgb(218,68,31)" fg:x="41" fg:w="2"/><text x="1.0558%" y="495.50"></text></g><g><title>&lt;rustc_demangle::Demangle as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="469" width="0.0393%" height="15" fill="rgb(207,120,37)" fg:x="41" fg:w="2"/><text x="1.0558%" y="479.50"></text></g><g><title>core::fmt::Write::write_fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="453" width="0.0393%" height="15" fill="rgb(227,98,0)" fg:x="41" fg:w="2"/><text x="1.0558%" y="463.50"></text></g><g><title>core::fmt::write (2 samples, 0.04%)</title><rect x="0.8058%" y="437" width="0.0393%" height="15" fill="rgb(207,7,3)" fg:x="41" fg:w="2"/><text x="1.0558%" y="447.50"></text></g><g><title>core::fmt::run (2 samples, 0.04%)</title><rect x="0.8058%" y="421" width="0.0393%" height="15" fill="rgb(206,98,19)" fg:x="41" fg:w="2"/><text x="1.0558%" y="431.50"></text></g><g><title>&lt;&amp;T as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="405" width="0.0393%" height="15" fill="rgb(217,5,26)" fg:x="41" fg:w="2"/><text x="1.0558%" y="415.50"></text></g><g><title>&lt;rustc_demangle::DemangleStyle as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="389" width="0.0393%" height="15" fill="rgb(235,190,38)" fg:x="41" fg:w="2"/><text x="1.0558%" y="399.50"></text></g><g><title>&lt;rustc_demangle::legacy::Demangle as core::fmt::Display&gt;::fmt (2 samples, 0.04%)</title><rect x="0.8058%" y="373" width="0.0393%" height="15" fill="rgb(247,86,24)" fg:x="41" fg:w="2"/><text x="1.0558%" y="383.50"></text></g><g><title>core::str::&lt;impl str&gt;::chars (1 samples, 0.02%)</title><rect x="0.8255%" y="357" width="0.0197%" height="15" fill="rgb(205,101,16)" fg:x="42" fg:w="1"/><text x="1.0755%" y="367.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.8255%" y="341" width="0.0197%" height="15" fill="rgb(246,168,33)" fg:x="42" fg:w="1"/><text x="1.0755%" y="351.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.8255%" y="325" width="0.0197%" height="15" fill="rgb(231,114,1)" fg:x="42" fg:w="1"/><text x="1.0755%" y="335.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.8255%" y="309" width="0.0197%" height="15" fill="rgb(207,184,53)" fg:x="42" fg:w="1"/><text x="1.0755%" y="319.50"></text></g><g><title>&lt;&amp;T as core::fmt::Debug&gt;::fmt (9 samples, 0.18%)</title><rect x="0.6879%" y="693" width="0.1769%" height="15" fill="rgb(224,95,51)" fg:x="35" fg:w="9"/><text x="0.9379%" y="703.50"></text></g><g><title>&lt;pprof::frames::Frames as core::fmt::Debug&gt;::fmt (9 samples, 0.18%)</title><rect x="0.6879%" y="677" width="0.1769%" height="15" fill="rgb(212,188,45)" fg:x="35" fg:w="9"/><text x="0.9379%" y="687.50"></text></g><g><title>core::fmt::Formatter::write_fmt (9 samples, 0.18%)</title><rect x="0.6879%" y="661" width="0.1769%" height="15" fill="rgb(223,154,38)" fg:x="35" fg:w="9"/><text x="0.9379%" y="671.50"></text></g><g><title>core::fmt::write (9 samples, 0.18%)</title><rect x="0.6879%" y="645" width="0.1769%" height="15" fill="rgb(251,22,52)" fg:x="35" fg:w="9"/><text x="0.9379%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::fmt::Display&gt;::fmt (1 samples, 0.02%)</title><rect x="0.8451%" y="629" width="0.0197%" height="15" fill="rgb(229,209,22)" fg:x="43" fg:w="1"/><text x="1.0951%" y="639.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (1 samples, 0.02%)</title><rect x="0.8451%" y="613" width="0.0197%" height="15" fill="rgb(234,138,34)" fg:x="43" fg:w="1"/><text x="1.0951%" y="623.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="0.8451%" y="597" width="0.0197%" height="15" fill="rgb(212,95,11)" fg:x="43" fg:w="1"/><text x="1.0951%" y="607.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="0.8451%" y="581" width="0.0197%" height="15" fill="rgb(240,179,47)" fg:x="43" fg:w="1"/><text x="1.0951%" y="591.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="0.8451%" y="565" width="0.0197%" height="15" fill="rgb(240,163,11)" fg:x="43" fg:w="1"/><text x="1.0951%" y="575.50"></text></g><g><title>&lt;std::io::buffered::bufwriter::BufWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="0.8451%" y="549" width="0.0197%" height="15" fill="rgb(236,37,12)" fg:x="43" fg:w="1"/><text x="1.0951%" y="559.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::write_all_cold (1 samples, 0.02%)</title><rect x="0.8451%" y="533" width="0.0197%" height="15" fill="rgb(232,164,16)" fg:x="43" fg:w="1"/><text x="1.0951%" y="543.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (1 samples, 0.02%)</title><rect x="0.8451%" y="517" width="0.0197%" height="15" fill="rgb(244,205,15)" fg:x="43" fg:w="1"/><text x="1.0951%" y="527.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="0.8451%" y="501" width="0.0197%" height="15" fill="rgb(223,117,47)" fg:x="43" fg:w="1"/><text x="1.0951%" y="511.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (1 samples, 0.02%)</title><rect x="0.8451%" y="485" width="0.0197%" height="15" fill="rgb(244,107,35)" fg:x="43" fg:w="1"/><text x="1.0951%" y="495.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (1 samples, 0.02%)</title><rect x="0.8451%" y="469" width="0.0197%" height="15" fill="rgb(205,140,8)" fg:x="43" fg:w="1"/><text x="1.0951%" y="479.50"></text></g><g><title>_write (1 samples, 0.02%)</title><rect x="0.8451%" y="453" width="0.0197%" height="15" fill="rgb(228,84,46)" fg:x="43" fg:w="1"/><text x="1.0951%" y="463.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="0.8451%" y="437" width="0.0197%" height="15" fill="rgb(254,188,9)" fg:x="43" fg:w="1"/><text x="1.0951%" y="447.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="0.8451%" y="421" width="0.0197%" height="15" fill="rgb(206,112,54)" fg:x="43" fg:w="1"/><text x="1.0951%" y="431.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="0.8451%" y="405" width="0.0197%" height="15" fill="rgb(216,84,49)" fg:x="43" fg:w="1"/><text x="1.0951%" y="415.50"></text></g><g><title>&lt;pprof::report::Report as core::fmt::Debug&gt;::fmt (11 samples, 0.22%)</title><rect x="0.6879%" y="741" width="0.2162%" height="15" fill="rgb(214,194,35)" fg:x="35" fg:w="11"/><text x="0.9379%" y="751.50"></text></g><g><title>core::fmt::Formatter::write_fmt (11 samples, 0.22%)</title><rect x="0.6879%" y="725" width="0.2162%" height="15" fill="rgb(249,28,3)" fg:x="35" fg:w="11"/><text x="0.9379%" y="735.50"></text></g><g><title>core::fmt::write (11 samples, 0.22%)</title><rect x="0.6879%" y="709" width="0.2162%" height="15" fill="rgb(222,56,52)" fg:x="35" fg:w="11"/><text x="0.9379%" y="719.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.04%)</title><rect x="0.8648%" y="693" width="0.0393%" height="15" fill="rgb(245,217,50)" fg:x="44" fg:w="2"/><text x="1.1148%" y="703.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.04%)</title><rect x="0.8648%" y="677" width="0.0393%" height="15" fill="rgb(213,201,24)" fg:x="44" fg:w="2"/><text x="1.1148%" y="687.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.04%)</title><rect x="0.8648%" y="661" width="0.0393%" height="15" fill="rgb(248,116,28)" fg:x="44" fg:w="2"/><text x="1.1148%" y="671.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (2 samples, 0.04%)</title><rect x="0.8648%" y="645" width="0.0393%" height="15" fill="rgb(219,72,43)" fg:x="44" fg:w="2"/><text x="1.1148%" y="655.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (2 samples, 0.04%)</title><rect x="0.8648%" y="629" width="0.0393%" height="15" fill="rgb(209,138,14)" fg:x="44" fg:w="2"/><text x="1.1148%" y="639.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (2 samples, 0.04%)</title><rect x="0.8648%" y="613" width="0.0393%" height="15" fill="rgb(222,18,33)" fg:x="44" fg:w="2"/><text x="1.1148%" y="623.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (2 samples, 0.04%)</title><rect x="0.8648%" y="597" width="0.0393%" height="15" fill="rgb(213,199,7)" fg:x="44" fg:w="2"/><text x="1.1148%" y="607.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (2 samples, 0.04%)</title><rect x="0.8648%" y="581" width="0.0393%" height="15" fill="rgb(250,110,10)" fg:x="44" fg:w="2"/><text x="1.1148%" y="591.50"></text></g><g><title>_write (2 samples, 0.04%)</title><rect x="0.8648%" y="565" width="0.0393%" height="15" fill="rgb(248,123,6)" fg:x="44" fg:w="2"/><text x="1.1148%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (2 samples, 0.04%)</title><rect x="0.8648%" y="549" width="0.0393%" height="15" fill="rgb(206,91,31)" fg:x="44" fg:w="2"/><text x="1.1148%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (2 samples, 0.04%)</title><rect x="0.8648%" y="533" width="0.0393%" height="15" fill="rgb(211,154,13)" fg:x="44" fg:w="2"/><text x="1.1148%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (2 samples, 0.04%)</title><rect x="0.8648%" y="517" width="0.0393%" height="15" fill="rgb(225,148,7)" fg:x="44" fg:w="2"/><text x="1.1148%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (5,039 samples, 99.04%)</title><rect x="0.9041%" y="741" width="99.0369%" height="15" fill="rgb(220,160,43)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="751.50">&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str</text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (5,039 samples, 99.04%)</title><rect x="0.9041%" y="725" width="99.0369%" height="15" fill="rgb(213,52,39)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="735.50">&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (5,039 samples, 99.04%)</title><rect x="0.9041%" y="709" width="99.0369%" height="15" fill="rgb(243,137,7)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="719.50">&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all</text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (5,039 samples, 99.04%)</title><rect x="0.9041%" y="693" width="99.0369%" height="15" fill="rgb(230,79,13)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="703.50">&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all</text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (5,039 samples, 99.04%)</title><rect x="0.9041%" y="677" width="99.0369%" height="15" fill="rgb(247,105,23)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="687.50">std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf</text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (5,039 samples, 99.04%)</title><rect x="0.9041%" y="661" width="99.0369%" height="15" fill="rgb(223,179,41)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="671.50">&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write</text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (5,039 samples, 99.04%)</title><rect x="0.9041%" y="645" width="99.0369%" height="15" fill="rgb(218,9,34)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="655.50">&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write</text></g><g><title>std::sys::unix::fd::FileDesc::write (5,039 samples, 99.04%)</title><rect x="0.9041%" y="629" width="99.0369%" height="15" fill="rgb(222,106,8)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="639.50">std::sys::unix::fd::FileDesc::write</text></g><g><title>_write (5,039 samples, 99.04%)</title><rect x="0.9041%" y="613" width="99.0369%" height="15" fill="rgb(211,220,0)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="623.50">_write</text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (5,039 samples, 99.04%)</title><rect x="0.9041%" y="597" width="99.0369%" height="15" fill="rgb(229,52,16)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="607.50">&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace</text></g><g><title>backtrace::backtrace::trace_unsynchronized (5,039 samples, 99.04%)</title><rect x="0.9041%" y="581" width="99.0369%" height="15" fill="rgb(212,155,18)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="591.50">backtrace::backtrace::trace_unsynchronized</text></g><g><title>backtrace::backtrace::libunwind::trace (5,039 samples, 99.04%)</title><rect x="0.9041%" y="565" width="99.0369%" height="15" fill="rgb(242,21,14)" fg:x="46" fg:w="5039"/><text x="1.1541%" y="575.50">backtrace::backtrace::libunwind::trace</text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="99.9410%" y="677" width="0.0197%" height="15" fill="rgb(222,19,48)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="687.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (1 samples, 0.02%)</title><rect x="99.9410%" y="661" width="0.0197%" height="15" fill="rgb(232,45,27)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="671.50"></text></g><g><title>std::sys_common::memchr::memrchr (1 samples, 0.02%)</title><rect x="99.9410%" y="645" width="0.0197%" height="15" fill="rgb(249,103,42)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="655.50"></text></g><g><title>std::sys::unix::memchr::memrchr (1 samples, 0.02%)</title><rect x="99.9410%" y="629" width="0.0197%" height="15" fill="rgb(246,81,33)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="639.50"></text></g><g><title>std::sys::unix::memchr::memrchr::memrchr_specific (1 samples, 0.02%)</title><rect x="99.9410%" y="613" width="0.0197%" height="15" fill="rgb(252,33,42)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="623.50"></text></g><g><title>core::slice::memchr::memrchr (1 samples, 0.02%)</title><rect x="99.9410%" y="597" width="0.0197%" height="15" fill="rgb(209,212,41)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="607.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::rposition (1 samples, 0.02%)</title><rect x="99.9410%" y="581" width="0.0197%" height="15" fill="rgb(207,154,6)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="591.50"></text></g><g><title>core::slice::memchr::memrchr::{{closure}} (1 samples, 0.02%)</title><rect x="99.9410%" y="565" width="0.0197%" height="15" fill="rgb(223,64,47)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="575.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="99.9410%" y="549" width="0.0197%" height="15" fill="rgb(211,161,38)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="559.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="99.9410%" y="533" width="0.0197%" height="15" fill="rgb(219,138,40)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="543.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="99.9410%" y="517" width="0.0197%" height="15" fill="rgb(241,228,46)" fg:x="5085" fg:w="1"/><text x="100.1910%" y="527.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (2 samples, 0.04%)</title><rect x="99.9410%" y="709" width="0.0393%" height="15" fill="rgb(223,209,38)" fg:x="5085" fg:w="2"/><text x="100.1910%" y="719.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (2 samples, 0.04%)</title><rect x="99.9410%" y="693" width="0.0393%" height="15" fill="rgb(236,164,45)" fg:x="5085" fg:w="2"/><text x="100.1910%" y="703.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::borrow_mut (1 samples, 0.02%)</title><rect x="99.9607%" y="677" width="0.0197%" height="15" fill="rgb(231,15,5)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="687.50"></text></g><g><title>core::cell::RefCell&lt;T&gt;::try_borrow_mut (1 samples, 0.02%)</title><rect x="99.9607%" y="661" width="0.0197%" height="15" fill="rgb(252,35,15)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="671.50"></text></g><g><title>core::cell::BorrowRefMut::new (1 samples, 0.02%)</title><rect x="99.9607%" y="645" width="0.0197%" height="15" fill="rgb(248,181,18)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="655.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="99.9607%" y="629" width="0.0197%" height="15" fill="rgb(233,39,42)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="639.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="99.9607%" y="613" width="0.0197%" height="15" fill="rgb(238,110,33)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="623.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="99.9607%" y="597" width="0.0197%" height="15" fill="rgb(233,195,10)" fg:x="5086" fg:w="1"/><text x="100.2107%" y="607.50"></text></g><g><title>all (5,088 samples, 100%)</title><rect x="0.0000%" y="1125" width="100.0000%" height="15" fill="rgb(254,105,3)" fg:x="0" fg:w="5088"/><text x="0.2500%" y="1135.50"></text></g><g><title>4575618560 (5,088 samples, 100.00%)</title><rect x="0.0000%" y="1109" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="5088"/><text x="0.2500%" y="1119.50">4575618560</text></g><g><title>_main (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1093" width="99.9410%" height="15" fill="rgb(224,227,45)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1103.50">_main</text></g><g><title>std::rt::lang_start (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1077" width="99.9410%" height="15" fill="rgb(229,198,43)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1087.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1061" width="99.9410%" height="15" fill="rgb(206,209,35)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1071.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1045" width="99.9410%" height="15" fill="rgb(245,195,53)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1055.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1029" width="99.9410%" height="15" fill="rgb(240,92,26)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1039.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,085 samples, 99.94%)</title><rect x="0.0590%" y="1013" width="99.9410%" height="15" fill="rgb(207,40,23)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1023.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (5,085 samples, 99.94%)</title><rect x="0.0590%" y="997" width="99.9410%" height="15" fill="rgb(223,111,35)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="1007.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (5,085 samples, 99.94%)</title><rect x="0.0590%" y="981" width="99.9410%" height="15" fill="rgb(229,147,28)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="991.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (5,085 samples, 99.94%)</title><rect x="0.0590%" y="965" width="99.9410%" height="15" fill="rgb(211,29,28)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="975.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (5,085 samples, 99.94%)</title><rect x="0.0590%" y="949" width="99.9410%" height="15" fill="rgb(228,72,33)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="959.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (5,085 samples, 99.94%)</title><rect x="0.0590%" y="933" width="99.9410%" height="15" fill="rgb(205,214,31)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="943.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (5,085 samples, 99.94%)</title><rect x="0.0590%" y="917" width="99.9410%" height="15" fill="rgb(224,111,15)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="927.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (5,085 samples, 99.94%)</title><rect x="0.0590%" y="901" width="99.9410%" height="15" fill="rgb(253,21,26)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="911.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (5,085 samples, 99.94%)</title><rect x="0.0590%" y="885" width="99.9410%" height="15" fill="rgb(245,139,43)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="895.50">core::ops::function::FnOnce::call_once</text></g><g><title>pprof_rs_demo::main (5,085 samples, 99.94%)</title><rect x="0.0590%" y="869" width="99.9410%" height="15" fill="rgb(252,170,7)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="879.50">pprof_rs_demo::main</text></g><g><title>pprof_rs_demo::flamegraph::flamegraph::do_something (5,085 samples, 99.94%)</title><rect x="0.0590%" y="853" width="99.9410%" height="15" fill="rgb(231,118,14)" fg:x="3" fg:w="5085"/><text x="0.3090%" y="863.50">pprof_rs_demo::flamegraph::flamegraph::do_something</text></g><g><title>std::io::stdio::_print (5,057 samples, 99.39%)</title><rect x="0.6093%" y="837" width="99.3907%" height="15" fill="rgb(238,83,0)" fg:x="31" fg:w="5057"/><text x="0.8593%" y="847.50">std::io::stdio::_print</text></g><g><title>std::io::stdio::print_to (5,057 samples, 99.39%)</title><rect x="0.6093%" y="821" width="99.3907%" height="15" fill="rgb(221,39,39)" fg:x="31" fg:w="5057"/><text x="0.8593%" y="831.50">std::io::stdio::print_to</text></g><g><title>&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,057 samples, 99.39%)</title><rect x="0.6093%" y="805" width="99.3907%" height="15" fill="rgb(222,119,46)" fg:x="31" fg:w="5057"/><text x="0.8593%" y="815.50">&lt;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt (5,057 samples, 99.39%)</title><rect x="0.6093%" y="789" width="99.3907%" height="15" fill="rgb(222,165,49)" fg:x="31" fg:w="5057"/><text x="0.8593%" y="799.50">&lt;&amp;std::io::stdio::Stdout as std::io::Write&gt;::write_fmt</text></g><g><title>std::io::Write::write_fmt (5,056 samples, 99.37%)</title><rect x="0.6289%" y="773" width="99.3711%" height="15" fill="rgb(219,113,52)" fg:x="32" fg:w="5056"/><text x="0.8789%" y="783.50">std::io::Write::write_fmt</text></g><g><title>core::fmt::write (5,055 samples, 99.35%)</title><rect x="0.6486%" y="757" width="99.3514%" height="15" fill="rgb(214,7,15)" fg:x="33" fg:w="5055"/><text x="0.8986%" y="767.50">core::fmt::write</text></g><g><title>core::fmt::num::imp::&lt;impl core::fmt::Display for i32&gt;::fmt (3 samples, 0.06%)</title><rect x="99.9410%" y="741" width="0.0590%" height="15" fill="rgb(235,32,4)" fg:x="5085" fg:w="3"/><text x="100.1910%" y="751.50"></text></g><g><title>core::fmt::num::imp::fmt_u64 (3 samples, 0.06%)</title><rect x="99.9410%" y="725" width="0.0590%" height="15" fill="rgb(238,90,54)" fg:x="5085" fg:w="3"/><text x="100.1910%" y="735.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.02%)</title><rect x="99.9803%" y="709" width="0.0197%" height="15" fill="rgb(213,208,19)" fg:x="5087" fg:w="1"/><text x="100.2303%" y="719.50"></text></g><g><title>&lt;pprof::backtrace::backtrace_rs::Trace as pprof::backtrace::Trace&gt;::trace (1 samples, 0.02%)</title><rect x="99.9803%" y="693" width="0.0197%" height="15" fill="rgb(233,156,4)" fg:x="5087" fg:w="1"/><text x="100.2303%" y="703.50"></text></g><g><title>backtrace::backtrace::trace_unsynchronized (1 samples, 0.02%)</title><rect x="99.9803%" y="677" width="0.0197%" height="15" fill="rgb(207,194,5)" fg:x="5087" fg:w="1"/><text x="100.2303%" y="687.50"></text></g><g><title>backtrace::backtrace::libunwind::trace (1 samples, 0.02%)</title><rect x="99.9803%" y="661" width="0.0197%" height="15" fill="rgb(206,111,30)" fg:x="5087" fg:w="1"/><text x="100.2303%" y="671.50"></text></g></svg></svg>